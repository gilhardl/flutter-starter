import {
  AndroidLanguage,
  FlutterPlatform,
  FlutterProjectTemplate,
  IosLanguage,
} from '../types';

/**
 * Base interface Nx generators options.
 *
 * These options are used to create the Flutter project, some of them are
 * passed to the `flutter create` command.
 *
 * Each Nx generator of Flutter projects extends this interface to add
 * specific options.
 *
 * - @see FlutterAppGeneratorOptions
 * - @see FlutterModuleGeneratorOptions
 * - @see FlutterPackageGeneratorOptions
 * - @see FlutterPluginGeneratorOptions
 */
export interface FlutterProjectGeneratorOptions {
  /**
   * Name of the Nx project.
   *
   * It is used as Flutter project name but with '-' replaced by '_'.
   */
  name: string;

  /**
   * Flutter project description. This string ends up in the pubspec.yaml file.
   */
  description: string;

  /**
   * The organization responsible for the Flutter project, in reverse domain name notation.
   * This string is used in Java package names and as prefix in the iOS bundle identifier.
   */
  org: string;

  /**
   * Whether to run "flutter pub get" after the project has been created.
   */
  pub: boolean;

  /**
   * When "flutter pub get" is run by the create command, this indicates whether to run it in offline mode or not. In offline mode, it will need to have all dependencies already available in the pub cache to succeed.
   */
  offline: boolean;

  /**
   * When performing operations, overwrite existing files.
   */
  overwrite: boolean;

  /**
   * The tags to add to the project.
   */
  tags?: string;

  /**
   * The directory where the project is generated.
   */
  directory: string;
}

/**
 * Normalized options passed to the `flutter create` command.
 */
export interface FlutterProjectGeneratorOptionsNormalized {
  /**
   * The template used to generate the project.
   *
   * It is used to determine the project type and Nx targets to generate.
   */
  template: FlutterProjectTemplate;

  /**
   * Name of the Nx project.
   *
   * It is used as Flutter project name but with '-' replaced by '_'.
   */
  name: string;

  /**
   * Flutter project description. This string ends up in the pubspec.yaml file.
   */
  description: string | null;

  /**
   * The organization responsible for the Flutter project, in reverse domain name notation.
   * This string is used in Java package names and as prefix in the iOS bundle identifier.
   */
  org: string | null;

  /**
   * The platforms supported by the project. Platform folders (e.g. android/) will be generated in the target project. Adding desktop platforms requires the corresponding desktop config setting to be enabled.
   *
   * If not specified, all platforms are generated by the Flutter CLI.
   */
  platforms: FlutterPlatform[] | null;

  /**
   * The language to use for Android-specific code.
   */
  androidLanguage: AndroidLanguage | null;

  /**
   * The language to use for iOS-specific code.
   */
  iosLanguage: IosLanguage | null;

  /**
   * Whether to run "flutter pub get" after the project has been created.
   */
  pub: boolean | null;

  /**
   * When "flutter pub get" is run by the create command, this indicates whether to run it in offline mode or not. In offline mode, it will need to have all dependencies already available in the pub cache to succeed.
   */
  offline: boolean | null;

  /**
   * When performing operations, overwrite existing files.
   */
  overwrite: boolean | null;

  /**
   * Specifies creating using an application template with a main.dart that is minimal, including no comments, as a starting point for a new application.
   */
  empty: boolean | null;

  /**
   * The tags to add to the project.
   */
  tags: string[];

  /**
   * The directory where the project is generated.
   */
  directory: string;
}
